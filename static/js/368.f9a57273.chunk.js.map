{"version":3,"file":"static/js/368.f9a57273.chunk.js","mappings":"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","sources":["webpack://water-tracker-app/./src/components/UpdatePassword/UpdatePassword.module.css?f9c7","schemasValdiate/UpdatePasswordSchema.jsx","components/UpdatePassword/UpdatePassword.jsx","pages/UpdatePasswordPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"sectionForm\":\"UpdatePassword_sectionForm__qI02y\",\"Container\":\"UpdatePassword_Container__-0BYR\",\"title\":\"UpdatePassword_title__xUHKK\",\"titleForm\":\"UpdatePassword_titleForm__MDYNB\",\"formContainer\":\"UpdatePassword_formContainer__CmYr8\",\"inputError\":\"UpdatePassword_inputError__AoRQo\",\"containerEmail\":\"UpdatePassword_containerEmail__FTFTW\",\"textInput\":\"UpdatePassword_textInput__KivSw\",\"inputField\":\"UpdatePassword_inputField__o5Img\",\"iconField\":\"UpdatePassword_iconField__5UQXf\",\"inputWithIcon\":\"UpdatePassword_inputWithIcon__DO0U1\",\"errorText\":\"UpdatePassword_errorText__cbG4+\",\"buttonForm\":\"UpdatePassword_buttonForm__JvwlA\",\"redirectLink\":\"UpdatePassword_redirectLink__6UulP\",\"redirectForgot\":\"UpdatePassword_redirectForgot__cbMmN\",\"linkForm\":\"UpdatePassword_linkForm__8CqRs\"};","import * as Yup from 'yup';\n\nexport const UpdatePasswordSchema = Yup.object().shape({\n  password: Yup.string()\n    .min(8, 'Password must be at least 8 characters long')\n    .required('Password is required'),\n  passwordRepeat: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    .required('Password repeat is required'),\n});\n","import { useState } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams, useNavigate } from 'react-router-dom';\n\nimport { Container, ContentLoader, Icon, Section } from 'components';\n\nimport { updatePasswordSelector } from 'store/selectors';\nimport { notifyApi } from 'notify';\nimport { updatePassword } from 'store/operations';\nimport { LOGIN_ROUTE } from 'routes/routes';\n\nimport css from './UpdatePassword.module.css';\nimport { UpdatePasswordSchema } from 'schemasValdiate/UpdatePasswordSchema';\n\nexport const UpdatePassword = () => {\n  const [visible, setVisible] = useState(false);\n  const [visibleEye, setVisibleEye] = useState(false);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { token } = useParams();\n\n  const { isLoading } = useSelector(updatePasswordSelector);\n\n  const handleSubmit = ({ password }, actions) => {\n    notifyApi(\n      dispatch(updatePassword({ token, password }))\n        .unwrap()\n        .then(() => {\n          actions.resetForm();\n          navigate(LOGIN_ROUTE);\n        }),\n      `Updating your password`,\n      true\n    );\n  };\n\n  return (\n    <Section className={css.sectionForm}>\n      <Container className={css.Container}>\n        <div className={css.titleFormThumb}>\n          <h1 className={css.title}>Change your password</h1>\n\n          <Formik\n            initialValues={{\n              password: '',\n              passwordRepeat: '',\n            }}\n            validationSchema={UpdatePasswordSchema}\n            onSubmit={handleSubmit}\n          >\n            {({ errors, touched }) => (\n              <Form className={css.formContainer}>\n                <div className={css.inputtThumb}>\n                  <p className={css.textInput}>Enter your new password</p>\n                  <div className={css.inputWithIcon}>\n                    <Field\n                      type={visible ? 'text' : 'password'}\n                      name=\"password\"\n                      placeholder=\"Password\"\n                      className={`${css.inputField} ${\n                        errors.password && touched.password\n                          ? `${css.inputError} ${css.error}`\n                          : ''\n                      }`}\n                    />\n                    <Icon\n                      id={visible ? 'icon-eye' : 'icon-eye-slash'}\n                      width=\"16\"\n                      height=\"16\"\n                      className={css.iconField}\n                      onClick={() => setVisible(!visible)}\n                    />\n                  </div>\n\n                  <div>\n                    <p className={css.textInput}>Repeat password</p>\n                    <div className={css.inputWithIcon}>\n                      <Field\n                        type={visibleEye ? 'text' : 'password'}\n                        name=\"passwordRepeat\"\n                        placeholder=\"Repeat password\"\n                        className={`${css.inputField} ${\n                          errors.passwordRepeat && touched.passwordRepeat\n                            ? `${css.inputError} ${css.error}`\n                            : ''\n                        }`}\n                      />\n                      <Icon\n                        id={visibleEye ? 'icon-eye' : 'icon-eye-slash'}\n                        width=\"16\"\n                        height=\"16\"\n                        className={css.iconField}\n                        onClick={() => setVisibleEye(!visibleEye)}\n                      />\n                    </div>\n\n                    {errors.passwordRepeat && touched.passwordRepeat && (\n                      <p className={css.errorText}>{errors.passwordRepeat}</p>\n                    )}\n\n                    <button\n                      type=\"submit\"\n                      className={css.buttonForm}\n                      disabled={isLoading}\n                    >\n                      Send {isLoading && <ContentLoader />}\n                    </button>\n                  </div>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </Container>\n    </Section>\n  );\n};\n","import { UpdatePassword } from 'components/UpdatePassword/UpdatePassword.jsx';\n\nexport default function ForgotPasswordPage() {\n  return <UpdatePassword />;\n}\n"],"names":["UpdatePasswordSchema","Yup","shape","password","min","required","passwordRepeat","oneOf","UpdatePassword","visible","setVisible","useState","visibleEye","setVisibleEye","dispatch","useDispatch","navigate","useNavigate","token","useParams","isLoading","useSelector","updatePasswordSelector","_jsx","Section","className","css","sectionForm","children","Container","_jsxs","titleFormThumb","title","Formik","initialValues","validationSchema","onSubmit","handleSubmit","_ref","actions","notifyApi","updatePassword","unwrap","then","resetForm","LOGIN_ROUTE","_ref2","errors","touched","Form","formContainer","inputtThumb","textInput","inputWithIcon","Field","type","name","placeholder","concat","inputField","inputError","error","Icon","id","width","height","iconField","onClick","errorText","buttonForm","disabled","ContentLoader","ForgotPasswordPage"],"sourceRoot":""}